
lab9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000003d  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000013b  00000000  00000000  0000029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000c6  00000000  00000000  000003da  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000019f  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000640  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000097  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000cc  00000000  00000000  00000717  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  cc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  dc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  e0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee ee       	ldi	r30, 0xEE	; 238
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	0e 94 b1 00 	call	0x162	; 0x162 <main>
 112:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <displayValue>:

	// We only have six LEDs, so only six bits of precision
	// mask off the rest
	// 0b0011 1111
	// 0x3F
	val = val & 0x3F;
 11a:	9c 01       	movw	r18, r24
 11c:	2f 73       	andi	r18, 0x3F	; 63
 11e:	30 70       	andi	r19, 0x00	; 0

	// This should be a loop but... 
	if (val & 0x01)
 120:	80 fd       	sbrc	r24, 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <displayValue+0xe>
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	01 c0       	rjmp	.+2      	; 0x12a <displayValue+0x10>
 128:	90 e8       	ldi	r25, 0x80	; 128
		toL |= 0x80;
	if (val & 0x02)
 12a:	21 fd       	sbrc	r18, 1
		toL |= 0x20;
 12c:	90 62       	ori	r25, 0x20	; 32
	if (val & 0x04)
 12e:	22 fd       	sbrc	r18, 2
		toL |= 0x08;
 130:	98 60       	ori	r25, 0x08	; 8
	if (val & 0x08)
 132:	23 fd       	sbrc	r18, 3
		toL |= 0x02;
 134:	92 60       	ori	r25, 0x02	; 2
	if (val & 0x10)
 136:	24 fd       	sbrc	r18, 4
 138:	02 c0       	rjmp	.+4      	; 0x13e <displayValue+0x24>
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	01 c0       	rjmp	.+2      	; 0x140 <displayValue+0x26>
 13e:	88 e0       	ldi	r24, 0x08	; 8
		toB |= 0x08;
	if (val & 0x20)
 140:	25 fd       	sbrc	r18, 5
		toB |= 0x02;
 142:	82 60       	ori	r24, 0x02	; 2
	
	PORTB = toB;
 144:	85 b9       	out	0x05, r24	; 5
	PORTL = toL;	
 146:	90 93 0b 01 	sts	0x010B, r25
}
 14a:	08 95       	ret

0000014c <init_buttons>:
int init_buttons()
{
	unsigned int count = 0;

	/* set PORTL and PORTB for output*/
	DDRL = 0xFF;
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	80 93 0a 01 	sts	0x010A, r24
	DDRB = 0xFF;
 152:	84 b9       	out	0x04, r24	; 4
	 * we want:
	 * 0b1000 0111
	 * which is:
	 * 0x87
	 */
	ADCSRA = 0x87;
 154:	87 e8       	ldi	r24, 0x87	; 135
 156:	80 93 7a 00 	sts	0x007A, r24

	/* ADMUX - ADC Multiplexer Selection Register
	 *
	 * Select ADC0
     */
	ADMUX = 0x40;
 15a:	80 e4       	ldi	r24, 0x40	; 64
 15c:	80 93 7c 00 	sts	0x007C, r24
}
 160:	08 95       	ret

00000162 <main>:


int main (void)
{
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
int init_buttons()
{
	unsigned int count = 0;

	/* set PORTL and PORTB for output*/
	DDRL = 0xFF;
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	80 93 0a 01 	sts	0x010A, r24
	DDRB = 0xFF;
 16c:	84 b9       	out	0x04, r24	; 4
	 * we want:
	 * 0b1000 0111
	 * which is:
	 * 0x87
	 */
	ADCSRA = 0x87;
 16e:	87 e8       	ldi	r24, 0x87	; 135
 170:	80 93 7a 00 	sts	0x007A, r24

	/* ADMUX - ADC Multiplexer Selection Register
	 *
	 * Select ADC0
     */
	ADMUX = 0x40;
 174:	80 e4       	ldi	r24, 0x40	; 64
 176:	80 93 7c 00 	sts	0x007C, r24
	
	for (;;)
	{

	// start conversion
	ADCSRA |= 0x40;
 17a:	80 91 7a 00 	lds	r24, 0x007A
 17e:	80 64       	ori	r24, 0x40	; 64
 180:	80 93 7a 00 	sts	0x007A, r24

	// bit 6 in ADCSRA is 1 while conversion is in progress
	// 0b0100 0000
	// 0x40
	while (ADCSRA & 0x40)
 184:	80 91 7a 00 	lds	r24, 0x007A
 188:	86 fd       	sbrc	r24, 6
 18a:	fc cf       	rjmp	.-8      	; 0x184 <main+0x22>
		;
	unsigned int val = ADCL;
 18c:	90 91 78 00 	lds	r25, 0x0078
	unsigned int val2 = ADCH;
 190:	80 91 79 00 	lds	r24, 0x0079

	val += (val2 << 8);
 194:	d8 2f       	mov	r29, r24
 196:	c0 e0       	ldi	r28, 0x00	; 0
 198:	9e 01       	movw	r18, r28
 19a:	29 0f       	add	r18, r25
 19c:	31 1d       	adc	r19, r1
 19e:	c9 01       	movw	r24, r18

	count = count + 1;
	
	if (val > 1000 )
 1a0:	33 e0       	ldi	r19, 0x03	; 3
 1a2:	89 3e       	cpi	r24, 0xE9	; 233
 1a4:	93 07       	cpc	r25, r19
 1a6:	18 f0       	brcs	.+6      	; 0x1ae <main+0x4c>
	{
		displayValue(0);
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	1b c0       	rjmp	.+54     	; 0x1e4 <main+0x82>
		continue;
	}
			 
    if (val < 50) 
 1ae:	82 33       	cpi	r24, 0x32	; 50
 1b0:	91 05       	cpc	r25, r1
 1b2:	18 f4       	brcc	.+6      	; 0x1ba <main+0x58>
	  displayValue(1);  
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	15 c0       	rjmp	.+42     	; 0x1e4 <main+0x82>
    else if (val < 195)
 1ba:	83 3c       	cpi	r24, 0xC3	; 195
 1bc:	91 05       	cpc	r25, r1
 1be:	18 f4       	brcc	.+6      	; 0x1c6 <main+0x64>
	  displayValue(2);
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0f c0       	rjmp	.+30     	; 0x1e4 <main+0x82>
    else if (val < 380)  
 1c6:	21 e0       	ldi	r18, 0x01	; 1
 1c8:	8c 37       	cpi	r24, 0x7C	; 124
 1ca:	92 07       	cpc	r25, r18
 1cc:	18 f4       	brcc	.+6      	; 0x1d4 <main+0x72>
	  displayValue(4);
 1ce:	84 e0       	ldi	r24, 0x04	; 4
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	08 c0       	rjmp	.+16     	; 0x1e4 <main+0x82>
    else if (val < 555)  
 1d4:	8b 52       	subi	r24, 0x2B	; 43
 1d6:	92 40       	sbci	r25, 0x02	; 2
 1d8:	18 f4       	brcc	.+6      	; 0x1e0 <main+0x7e>
	  displayValue(8);
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <main+0x82>
    else 
	  displayValue(16);
 1e0:	80 e1       	ldi	r24, 0x10	; 16
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 8d 00 	call	0x11a	; 0x11a <displayValue>
 1e8:	c8 cf       	rjmp	.-112    	; 0x17a <main+0x18>

000001ea <_exit>:
 1ea:	f8 94       	cli

000001ec <__stop_program>:
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <__stop_program>
